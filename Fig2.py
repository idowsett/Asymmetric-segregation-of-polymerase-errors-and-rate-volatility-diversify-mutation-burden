# for Fig.2; Dowsett et al.
import math
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from collections import defaultdict
from scipy import stats
from scipy.stats import nbinom
from scipy.stats import poisson
from scipy.stats import gamma
import random
from statistics import mean
from statistics import stdev

#Introduction
"""The following Python 3 script simulates the segregation of mismatches between
mother (Mm) and daughter (Dm) cells using two different models.  Negative binomials
can be interpreted as the sum of a gamma-distributed set of Poisson distributions.
In the first model, designated "nb", we imagine that each chromosome (including
homologues) independently mutates with a rate drawn from a gamma-distribution.
Thus, Dm and Mm can both be drawn from anywhere within the distribution generated by
the negative binomial model.  In the second model, designated "gp", mutagenesis of the
entire genome is governed by the same Poisson process, but the rate varies from one
division to the next within a Gamma distribution of lambda values defined by the negative
binomial model. Thus, in a given division, Dm and Mm are constrained to be
within the same Poisson distribution."""

# Output Files(s) folder:
from pathlib import Path
File_save_location  = Path.cwd()

#Defined functions
"""The first two functions were adapted from the following stackoverflow discussion thread:
https://stackoverflow.com/questions/40846992/alternative-parametrization-of-the-negative-binomial-in-scipy
For additional background, see the following two web pages:
https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.nbinom.html
https://en.wikipedia.org/wiki/Negative_binomial_distribution
scipy.nbinom takes n and p as shape parameters where "n" is the number of successes and "p" is
the probability of a single success. Whereas nb is usually defined as a sequence of Bernoulli
trials, repeated until a predefined nonrandom "r" number of FAILURES occurs, scipy defines nb
as a sequence of Bernoulli trials, repeated until a predefined, non-random "n" number of SUCCESSES
occurs.   Of course, this is an issue of semantics in how you define success and failure:
r is equivalent to n. Theta from glm.nb is equivalent to r, and therefore to n.  (See:
https://stats.stackexchange.com/questions/10419/what-is-theta-in-a-negative-binomial-regression-fitted-with-r
)
How scipy.stats.nbinom defines p, the probability of success, represents a potential point of
confusion. The standard definition of "success" for nb means "failure" in scipy.binom.
Thus, p in scipy is actually 1-p.
"""
def convert_nbparams(muc, theta):
    r = theta
    var = muc + 1 / r * muc ** 2
    p = (var - muc) / var
    return r, 1-p

def nb_rvs(muc, theta, loc, size):
    return nbinom.rvs(*convert_nbparams(muc, theta),loc, size)

def linregparams (df):
    x = df["Dm"]
    y = df["Mm"]
    slope, intercept, r_value, p_value, std_err = stats.linregress(x,y)
    print("slope: %f    intercept: %f    p_value: %f    std_err: %f" % (slope, intercept, p_value, std_err))
    print("R-squared: %f" % r_value**2)

# Input parameters for nb from glm.nb in R.
mu = 4.927
theta = 60.42

# Number of desired iterations in the simulation.
n = 1000

# Conversions
muc = math.exp(mu) #mu is in log form and must be exponentiated.
gv = (muc)**2/theta #gv is the variance of the Gamma distribution of lambda
gscale = gv/muc #gives the scale paramater of the Gamma distribution of lambda


"""Simulates Dm and Mm counts assuming mismatches arise each division from the same negative
binomial process."""
counternb = 0
nbtuples = []
while counternb < n:
    nbDmMm = nb_rvs(muc,theta,loc=0,size=2)
    nbtuples.append(nbDmMm)
    counternb += 1
dfnb = pd.DataFrame.from_records(nbtuples,columns=['Dm','Mm'])
dfnb["sum"] = dfnb.sum(axis=1)
print("Linear regression of nb model:")
linregparams(dfnb)

"""Simulates Dm and Mm counts assuming mismatches arise each division from a Poisson process
whose rate is drawn each time from a Gamma distribution."""
data_gamma = (gamma.rvs(a=theta,scale=gscale,size=n)) #Generates list of gamma distributed rates.
gptuples = []
for g in data_gamma:
    gpDmMm = poisson.rvs(mu=g, size=2)
    gptuples.append(gpDmMm)
dfgp = pd.DataFrame.from_records(gptuples,columns=['Dm','Mm'])
dfgp["sum"] = dfgp.sum(axis=1)
print("Linear regression of gp model:")
linregparams(dfgp)

"""Creates data frame of actual data for comparison."""
df_data = pd.read_csv("G:\My Drive\Volatility File Share\Data\MisMatchCounts2.csv")
df_data["sum"] = df_data.sum(axis=1)
print("Linear regression of data:")
linregparams(df_data)

"""Creates data frame of data, normalized for size of sequenced genome, for comparison."""
df_data_N = pd.read_csv("G:\My Drive\Volatility File Share\Data\MisMatchCountNorm.csv")
df_data_N["sum"] = df_data.sum(axis=1)
print("Linear regression of data_Norm:")
linregparams(df_data_N)

sns.set(style="white", palette="bright", color_codes=True, rc={"lines.linewidth": 1.0})
plt.rcParams['patch.linewidth'] = 0

"""Plots the linear regressions of the nb model and the actual data."""
fig1, ax = plt.subplots(figsize=(2,2))
sns.regplot(x="Dm", y="Mm", data=dfnb, marker='o', color="peachpuff", scatter_kws={'s':7},line_kws={'color':"peru"})
sns.regplot(x="Dm", y="Mm", data=df_data, color="green",marker='o', scatter_kws={'s':11})
ax.set(ylim=(50, 225))
ax.set(xlim=(50, 225))
ax.set(xlabel='Dm', ylabel='Mm')
ax.tick_params(bottom=True,left=True, labelsize=8)
fig1.savefig(f"{File_save_location}/lineRegDmMmnb1.pdf",transparent = True,bbox_inches='tight')

"""Plots the linear regressions of the gp model and the actual data."""
fig2, ax = plt.subplots(figsize=(2,2))
sns.regplot(x="Dm", y="Mm", data=dfgp, marker='o', color="silver", scatter_kws={'s':7},line_kws={'color':"gray"})
sns.regplot(x="Dm", y="Mm", data=df_data, color="green",marker='o', scatter_kws={'s':11})
ax.set(ylim=(50, 225))
ax.set(xlim=(50, 225))
ax.set(xlabel='Dm', ylabel='Mm')
ax.tick_params(bottom=True,left=True, labelsize=8)
fig2.savefig(f"{File_save_location}/lineRegDmMmgp.pdf",transparent = True,bbox_inches='tight')

"""Plots the linear regressions of the gp model and the normalized actual data."""
fig2, ax = plt.subplots(figsize=(2,2))
sns.regplot(x="Dm", y="Mm", data=dfgp, marker='o', color="silver", scatter_kws={'s':7},line_kws={'color':"gray"})
sns.regplot(x="Dm", y="Mm", data=df_data_N, color="red",marker='o', scatter_kws={'s':11})
ax.set(ylim=(50, 225))
ax.set(xlim=(50, 225))
ax.set(xlabel='Dm', ylabel='Mm')
ax.tick_params(bottom=True,left=True, labelsize=8)
fig2.savefig(f"{File_save_location}/lineRegDmMmgpN.pdf",transparent = True,bbox_inches='tight')


"""Plots the distributions of Dm and Mm from the nb model and actual data."""
fig3, ax = plt.subplots(figsize=(2,2))

sns.distplot(dfnb["Dm"],
              bins=range(30,230,5),
             hist=False,
#               kde=False,
#               norm_hist=True,
              color="cyan",
            kde_kws={"lw":0.7})
sns.distplot(dfnb["Mm"],
              bins=range(30,200,5),
             hist=False,
#               kde=False,
#               norm_hist=True,
              color="silver")
sns.distplot(df_data["Dm"],
              bins=range(30,230,5),
             hist=False,
#               kde=False,
#               norm_hist=True,
              color="goldenrod")
sns.distplot(df_data["Mm"],
              bins=range(30,230,5),
             hist=False,
#               kde=False,
#               norm_hist=True,
              color="blueviolet")
ax.set(xlim=(30, 210), xlabel='Mismatches/Div (nb)', ylabel='Density')
ax.tick_params(bottom=True,left=True,labelsize=8)
fig3.savefig(f"{File_save_location}/MismatchDistnb1.pdf",transparent = True,bbox_inches='tight')

fig4, ax = plt.subplots(figsize=(2,2))
sns.distplot(dfnb["sum"],
                  bins=range(100,400,10),
                  kde=False,
                  norm_hist=True,
                  color="peru")
sns.distplot(df_data["sum"],
                  bins=range(100,400,10),
                  kde=False,
                  norm_hist=True,
                  color="green")
ax.set(xlabel='Total Errors/Div (nb)', ylabel='Density')
ax.tick_params(bottom=True,left=True,labelsize=8)
fig4.savefig(f"{File_save_location}/TotErDistnb1.pdf",transparent = True,bbox_inches='tight')

"""Plots the distributions of Dm and Mm from the gp model and actual data."""
fig5, ax = plt.subplots(figsize=(2,2))

sns.distplot(dfgp["Dm"],
              bins=range(30,230,5),
             hist=False,
#               kde=False,
#               norm_hist=True,
              color="cyan",
            kde_kws={"lw":0.7})
sns.distplot(dfgp["Mm"],
              bins=range(30,200,5),
             hist=False,
#               kde=False,
#               norm_hist=True,
              color="silver")
sns.distplot(df_data["Dm"],
              bins=range(30,230,5),
             hist=False,
#               kde=False,
#               norm_hist=True,
              color="goldenrod")
sns.distplot(df_data["Mm"],
              bins=range(30,230,5),
             hist=False,
#               kde=False,
#               norm_hist=True,
              color="blueviolet")
ax.set(xlim=(30, 210), xlabel='Mismatches/Div (gp)', ylabel='Density')
ax.tick_params(bottom=True,left=True,labelsize=8)
fig5.savefig(f"{File_save_location}/MismatchDistgp1.pdf",transparent = True,bbox_inches='tight')

fig6, ax = plt.subplots(figsize=(2,2))
sns.distplot(dfnb["sum"],
                  bins=range(100,400,10),
                  kde=False,
                  norm_hist=True,
                  color="peru")
sns.distplot(df_data["sum"],
                  bins=range(100,400,10),
                  kde=False,
                  norm_hist=True,
                  color="green")
ax.set(xlabel='Total Errors/Div (gp)', ylabel='Density')
ax.tick_params(bottom=True,left=True,labelsize=8)
fig6.savefig(f"{File_save_location}/TotErDistgp1.pdf",transparent = True,bbox_inches='tight')
